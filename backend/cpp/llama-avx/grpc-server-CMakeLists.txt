set(TARGET grpc-server)

# Find required packages using pkg-config
find_package(PkgConfig REQUIRED)
find_package(Threads REQUIRED)

# Find gRPC and protobuf using pkg-config
pkg_check_modules(GRPC REQUIRED grpc++ grpc)
pkg_check_modules(PROTOBUF REQUIRED protobuf)
pkg_check_modules(UTF8_RANGE REQUIRED utf8_range)
pkg_check_modules(ABSL_STRINGS REQUIRED absl_strings)
pkg_check_modules(ABSL_BASE REQUIRED absl_base)

include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

# Alternative approach using find_package for Abseil
find_package(absl QUIET)
if(absl_FOUND)
    message(STATUS "Found Abseil using find_package")
    set(ABSL_LIBRARIES absl::strings absl::base absl::log_severity)
else()
    message(STATUS "Abseil not found with find_package, using pkg-config")
    set(ABSL_LIBRARIES ${ABSL_STRINGS_LIBRARIES} ${ABSL_BASE_LIBRARIES})
endif()

# Add compile flags
add_compile_options(${GRPC_CFLAGS} ${PROTOBUF_CFLAGS} ${UTF8_RANGE_CFLAGS} ${ABSL_STRINGS_CFLAGS} ${ABSL_BASE_CFLAGS})

set(TARGET_SRCS
    grpc-server.cpp
    backend.pb.cc
    backend.grpc.pb.cc
    utf8_range_shim.cpp
    mtmd-stub.cpp
    ../../common/common.cpp
    ../../common/log.cpp
    ../../common/arg.cpp
    ../../common/chat.cpp
    ../../common/chat-parser.cpp
    ../../common/sampling.cpp
    ../../common/speculative.cpp
    ../../common/json-schema-to-grammar.cpp
    ../../common/regex-partial.cpp
    ../../common/json-partial.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/../../common/build-info.cpp
)

# Add web assets
set(PUBLIC_ASSETS
    index.html.gz
    loading.html
)

foreach(asset ${PUBLIC_ASSETS})
    set(input "${CMAKE_CURRENT_SOURCE_DIR}/${asset}")
    set(output "${CMAKE_CURRENT_BINARY_DIR}/${asset}.hpp")
    list(APPEND TARGET_SRCS ${output})
    if(EXISTS "${input}")
        add_custom_command(
            DEPENDS "${input}"
            OUTPUT "${output}"
            COMMAND "${CMAKE_COMMAND}" "-DINPUT=${input}" "-DOUTPUT=${output}" -P "${PROJECT_SOURCE_DIR}/scripts/xxd.cmake"
        )
        set_source_files_properties(${output} PROPERTIES GENERATED TRUE)
    else()
        # Create empty asset if file doesn't exist
        file(WRITE "${output}" "// Empty ${asset} asset\nconst char ${asset}_data[] = \"\";\nconst size_t ${asset}_size = 0;\n")
    endif()
endforeach()

add_executable(${TARGET} ${TARGET_SRCS})

target_include_directories(${TARGET} PRIVATE ../../common ../../vendor ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_features(${TARGET} PRIVATE cxx_std_11)

# Link libraries
target_link_libraries(${TARGET} PRIVATE 
    ${GRPC_LIBRARIES}
    ${PROTOBUF_LIBRARIES}
    ${UTF8_RANGE_LIBRARIES}
    ${ABSL_LIBRARIES}
    Threads::Threads
    llama
    ggml
)

# Add library directories
target_link_directories(${TARGET} PRIVATE 
    ${GRPC_LIBRARY_DIRS}
    ${PROTOBUF_LIBRARY_DIRS}
    ${UTF8_RANGE_LIBRARY_DIRS}
    ${ABSL_STRINGS_LIBRARY_DIRS}
    ${ABSL_BASE_LIBRARY_DIRS}
)

# Set compile definitions
target_compile_definitions(${TARGET} PRIVATE 
    ${GRPC_CFLAGS_OTHER}
    ${PROTOBUF_CFLAGS_OTHER}
    ${UTF8_RANGE_CFLAGS_OTHER}
    ${ABSL_STRINGS_CFLAGS_OTHER}
    ${ABSL_BASE_CFLAGS_OTHER}
)
